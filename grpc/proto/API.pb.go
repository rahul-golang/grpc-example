// Code generated by protoc-gen-go. DO NOT EDIT.
// source: API.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type NetworkKey struct {
	Key                  int64    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NetworkKey) Reset()         { *m = NetworkKey{} }
func (m *NetworkKey) String() string { return proto.CompactTextString(m) }
func (*NetworkKey) ProtoMessage()    {}
func (*NetworkKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{0}
}

func (m *NetworkKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkKey.Unmarshal(m, b)
}
func (m *NetworkKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkKey.Marshal(b, m, deterministic)
}
func (m *NetworkKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkKey.Merge(m, src)
}
func (m *NetworkKey) XXX_Size() int {
	return xxx_messageInfo_NetworkKey.Size(m)
}
func (m *NetworkKey) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkKey.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkKey proto.InternalMessageInfo

func (m *NetworkKey) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type UserKey struct {
	Key                  int64    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserKey) Reset()         { *m = UserKey{} }
func (m *UserKey) String() string { return proto.CompactTextString(m) }
func (*UserKey) ProtoMessage()    {}
func (*UserKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{1}
}

func (m *UserKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserKey.Unmarshal(m, b)
}
func (m *UserKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserKey.Marshal(b, m, deterministic)
}
func (m *UserKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKey.Merge(m, src)
}
func (m *UserKey) XXX_Size() int {
	return xxx_messageInfo_UserKey.Size(m)
}
func (m *UserKey) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKey.DiscardUnknown(m)
}

var xxx_messageInfo_UserKey proto.InternalMessageInfo

func (m *UserKey) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

type User struct {
	Key                  int64    `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{2}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetKey() int64 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *User) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UserKeys struct {
	Users                []*UserKey `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *UserKeys) Reset()         { *m = UserKeys{} }
func (m *UserKeys) String() string { return proto.CompactTextString(m) }
func (*UserKeys) ProtoMessage()    {}
func (*UserKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{3}
}

func (m *UserKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserKeys.Unmarshal(m, b)
}
func (m *UserKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserKeys.Marshal(b, m, deterministic)
}
func (m *UserKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserKeys.Merge(m, src)
}
func (m *UserKeys) XXX_Size() int {
	return xxx_messageInfo_UserKeys.Size(m)
}
func (m *UserKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_UserKeys.DiscardUnknown(m)
}

var xxx_messageInfo_UserKeys proto.InternalMessageInfo

func (m *UserKeys) GetUsers() []*UserKey {
	if m != nil {
		return m.Users
	}
	return nil
}

type TwoUserKeys struct {
	User1                *UserKey `protobuf:"bytes,1,opt,name=user1,proto3" json:"user1,omitempty"`
	User2                *UserKey `protobuf:"bytes,2,opt,name=user2,proto3" json:"user2,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TwoUserKeys) Reset()         { *m = TwoUserKeys{} }
func (m *TwoUserKeys) String() string { return proto.CompactTextString(m) }
func (*TwoUserKeys) ProtoMessage()    {}
func (*TwoUserKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{4}
}

func (m *TwoUserKeys) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TwoUserKeys.Unmarshal(m, b)
}
func (m *TwoUserKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TwoUserKeys.Marshal(b, m, deterministic)
}
func (m *TwoUserKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwoUserKeys.Merge(m, src)
}
func (m *TwoUserKeys) XXX_Size() int {
	return xxx_messageInfo_TwoUserKeys.Size(m)
}
func (m *TwoUserKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_TwoUserKeys.DiscardUnknown(m)
}

var xxx_messageInfo_TwoUserKeys proto.InternalMessageInfo

func (m *TwoUserKeys) GetUser1() *UserKey {
	if m != nil {
		return m.User1
	}
	return nil
}

func (m *TwoUserKeys) GetUser2() *UserKey {
	if m != nil {
		return m.User2
	}
	return nil
}

type Contacts struct {
	Contacts             []string `protobuf:"bytes,1,rep,name=contacts,proto3" json:"contacts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Contacts) Reset()         { *m = Contacts{} }
func (m *Contacts) String() string { return proto.CompactTextString(m) }
func (*Contacts) ProtoMessage()    {}
func (*Contacts) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{5}
}

func (m *Contacts) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Contacts.Unmarshal(m, b)
}
func (m *Contacts) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Contacts.Marshal(b, m, deterministic)
}
func (m *Contacts) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Contacts.Merge(m, src)
}
func (m *Contacts) XXX_Size() int {
	return xxx_messageInfo_Contacts.Size(m)
}
func (m *Contacts) XXX_DiscardUnknown() {
	xxx_messageInfo_Contacts.DiscardUnknown(m)
}

var xxx_messageInfo_Contacts proto.InternalMessageInfo

func (m *Contacts) GetContacts() []string {
	if m != nil {
		return m.Contacts
	}
	return nil
}

type Interests struct {
	Interests            []string `protobuf:"bytes,1,rep,name=interests,proto3" json:"interests,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Interests) Reset()         { *m = Interests{} }
func (m *Interests) String() string { return proto.CompactTextString(m) }
func (*Interests) ProtoMessage()    {}
func (*Interests) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{6}
}

func (m *Interests) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Interests.Unmarshal(m, b)
}
func (m *Interests) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Interests.Marshal(b, m, deterministic)
}
func (m *Interests) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Interests.Merge(m, src)
}
func (m *Interests) XXX_Size() int {
	return xxx_messageInfo_Interests.Size(m)
}
func (m *Interests) XXX_DiscardUnknown() {
	xxx_messageInfo_Interests.DiscardUnknown(m)
}

var xxx_messageInfo_Interests proto.InternalMessageInfo

func (m *Interests) GetInterests() []string {
	if m != nil {
		return m.Interests
	}
	return nil
}

type UserViewingNetwork struct {
	User                 *UserKey    `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Network              *NetworkKey `protobuf:"bytes,2,opt,name=network,proto3" json:"network,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *UserViewingNetwork) Reset()         { *m = UserViewingNetwork{} }
func (m *UserViewingNetwork) String() string { return proto.CompactTextString(m) }
func (*UserViewingNetwork) ProtoMessage()    {}
func (*UserViewingNetwork) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{7}
}

func (m *UserViewingNetwork) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserViewingNetwork.Unmarshal(m, b)
}
func (m *UserViewingNetwork) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserViewingNetwork.Marshal(b, m, deterministic)
}
func (m *UserViewingNetwork) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserViewingNetwork.Merge(m, src)
}
func (m *UserViewingNetwork) XXX_Size() int {
	return xxx_messageInfo_UserViewingNetwork.Size(m)
}
func (m *UserViewingNetwork) XXX_DiscardUnknown() {
	xxx_messageInfo_UserViewingNetwork.DiscardUnknown(m)
}

var xxx_messageInfo_UserViewingNetwork proto.InternalMessageInfo

func (m *UserViewingNetwork) GetUser() *UserKey {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserViewingNetwork) GetNetwork() *NetworkKey {
	if m != nil {
		return m.Network
	}
	return nil
}

type NetworkMembersView struct {
	Members              []*MemberDetails `protobuf:"bytes,1,rep,name=members,proto3" json:"members,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *NetworkMembersView) Reset()         { *m = NetworkMembersView{} }
func (m *NetworkMembersView) String() string { return proto.CompactTextString(m) }
func (*NetworkMembersView) ProtoMessage()    {}
func (*NetworkMembersView) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{8}
}

func (m *NetworkMembersView) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkMembersView.Unmarshal(m, b)
}
func (m *NetworkMembersView) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkMembersView.Marshal(b, m, deterministic)
}
func (m *NetworkMembersView) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkMembersView.Merge(m, src)
}
func (m *NetworkMembersView) XXX_Size() int {
	return xxx_messageInfo_NetworkMembersView.Size(m)
}
func (m *NetworkMembersView) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkMembersView.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkMembersView proto.InternalMessageInfo

func (m *NetworkMembersView) GetMembers() []*MemberDetails {
	if m != nil {
		return m.Members
	}
	return nil
}

type MemberDetails struct {
	UserKey              *UserKey   `protobuf:"bytes,1,opt,name=userKey,proto3" json:"userKey,omitempty"`
	CommonContacts       *Contacts  `protobuf:"bytes,2,opt,name=commonContacts,proto3" json:"commonContacts,omitempty"`
	CommonInterests      *Interests `protobuf:"bytes,3,opt,name=commonInterests,proto3" json:"commonInterests,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MemberDetails) Reset()         { *m = MemberDetails{} }
func (m *MemberDetails) String() string { return proto.CompactTextString(m) }
func (*MemberDetails) ProtoMessage()    {}
func (*MemberDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_cac38fe7d323f2d0, []int{9}
}

func (m *MemberDetails) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MemberDetails.Unmarshal(m, b)
}
func (m *MemberDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MemberDetails.Marshal(b, m, deterministic)
}
func (m *MemberDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MemberDetails.Merge(m, src)
}
func (m *MemberDetails) XXX_Size() int {
	return xxx_messageInfo_MemberDetails.Size(m)
}
func (m *MemberDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_MemberDetails.DiscardUnknown(m)
}

var xxx_messageInfo_MemberDetails proto.InternalMessageInfo

func (m *MemberDetails) GetUserKey() *UserKey {
	if m != nil {
		return m.UserKey
	}
	return nil
}

func (m *MemberDetails) GetCommonContacts() *Contacts {
	if m != nil {
		return m.CommonContacts
	}
	return nil
}

func (m *MemberDetails) GetCommonInterests() *Interests {
	if m != nil {
		return m.CommonInterests
	}
	return nil
}

func init() {
	proto.RegisterType((*NetworkKey)(nil), "interview.NetworkKey")
	proto.RegisterType((*UserKey)(nil), "interview.UserKey")
	proto.RegisterType((*User)(nil), "interview.User")
	proto.RegisterType((*UserKeys)(nil), "interview.UserKeys")
	proto.RegisterType((*TwoUserKeys)(nil), "interview.TwoUserKeys")
	proto.RegisterType((*Contacts)(nil), "interview.Contacts")
	proto.RegisterType((*Interests)(nil), "interview.Interests")
	proto.RegisterType((*UserViewingNetwork)(nil), "interview.UserViewingNetwork")
	proto.RegisterType((*NetworkMembersView)(nil), "interview.NetworkMembersView")
	proto.RegisterType((*MemberDetails)(nil), "interview.MemberDetails")
}

func init() { proto.RegisterFile("API.proto", fileDescriptor_cac38fe7d323f2d0) }

var fileDescriptor_cac38fe7d323f2d0 = []byte{
	// 481 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xb5, 0x49, 0xa8, 0xe3, 0x89, 0x48, 0xcb, 0x14, 0x90, 0x65, 0x28, 0x8a, 0xf6, 0x50, 0x05,
	0xa9, 0x0a, 0x74, 0xe1, 0x86, 0x04, 0xea, 0xc7, 0x81, 0x0a, 0x81, 0x90, 0x13, 0x10, 0xe2, 0xe6,
	0x86, 0x51, 0x30, 0xc5, 0x36, 0xf2, 0x6e, 0x1b, 0xf5, 0xaf, 0xf1, 0xeb, 0xd0, 0xae, 0x77, 0x1d,
	0xc7, 0x71, 0x7d, 0xdb, 0x9d, 0x79, 0xef, 0xcd, 0xdb, 0xe7, 0x49, 0xc0, 0x3f, 0xf9, 0x72, 0x31,
	0xfd, 0x5b, 0xe4, 0x32, 0x47, 0x3f, 0xc9, 0x24, 0x15, 0x37, 0x09, 0xad, 0xd8, 0x73, 0x80, 0xcf,
	0x24, 0x57, 0x79, 0x71, 0xf5, 0x91, 0x6e, 0x71, 0x0f, 0x7a, 0x57, 0x74, 0x1b, 0xb8, 0x63, 0x77,
	0xd2, 0x8b, 0xd4, 0x91, 0x3d, 0x05, 0xef, 0xab, 0xa0, 0xa2, 0xbd, 0x79, 0x04, 0x7d, 0xd5, 0xdc,
	0xee, 0x20, 0x42, 0x3f, 0x8b, 0x53, 0x0a, 0xee, 0x8d, 0xdd, 0x89, 0x1f, 0xe9, 0x33, 0x7b, 0x03,
	0x03, 0x23, 0x25, 0x70, 0x02, 0xf7, 0xaf, 0x05, 0x15, 0x22, 0x70, 0xc7, 0xbd, 0xc9, 0x90, 0xe3,
	0xb4, 0x72, 0x34, 0x35, 0x98, 0xa8, 0x04, 0xb0, 0x18, 0x86, 0xf3, 0x55, 0xde, 0x24, 0x1e, 0xeb,
	0x61, 0x1d, 0xc4, 0x63, 0x8b, 0xe4, 0xda, 0x43, 0x07, 0x92, 0xb3, 0x43, 0x18, 0x9c, 0xe5, 0x99,
	0x8c, 0x17, 0x52, 0x60, 0x08, 0x83, 0x85, 0x39, 0x6b, 0x6f, 0x7e, 0x54, 0xdd, 0xd9, 0x0b, 0xf0,
	0x2f, 0x94, 0x06, 0x09, 0x29, 0xf0, 0x19, 0x94, 0x29, 0xaa, 0x8b, 0x41, 0xae, 0x0b, 0x2c, 0x05,
	0x54, 0x43, 0xbe, 0x25, 0xb4, 0x4a, 0xb2, 0xa5, 0x49, 0x18, 0x0f, 0xa1, 0xaf, 0x26, 0x76, 0x78,
	0xd7, 0x7d, 0x7c, 0x09, 0x5e, 0x56, 0x52, 0x8c, 0xf9, 0xc7, 0x35, 0xe8, 0xfa, 0x73, 0x45, 0x16,
	0xc5, 0x3e, 0x00, 0x9a, 0xf2, 0x27, 0x4a, 0x2f, 0xa9, 0x10, 0x6a, 0x30, 0x72, 0xf0, 0xd2, 0xf2,
	0x6a, 0x62, 0x0e, 0x6a, 0x32, 0x25, 0xf0, 0x9c, 0x64, 0x9c, 0xfc, 0x11, 0x91, 0x05, 0xb2, 0x7f,
	0x2e, 0x3c, 0xd8, 0x68, 0xe1, 0x11, 0x78, 0xd7, 0xa5, 0xbb, 0x0e, 0xdf, 0x16, 0x82, 0x6f, 0x61,
	0xb4, 0xc8, 0xd3, 0x34, 0xcf, 0x6c, 0xa2, 0xe6, 0x05, 0xfb, 0x35, 0x92, 0x6d, 0x45, 0x0d, 0x28,
	0xbe, 0x83, 0xdd, 0xb2, 0x52, 0xc5, 0x1c, 0xf4, 0x34, 0xfb, 0x51, 0x8d, 0x5d, 0xf5, 0xa2, 0x26,
	0x98, 0xcf, 0x60, 0x64, 0x62, 0x98, 0x29, 0xf0, 0x82, 0xf0, 0x04, 0x1e, 0x2e, 0x49, 0x6e, 0x66,
	0x83, 0xed, 0x69, 0x86, 0xfb, 0xdb, 0xef, 0x12, 0xcc, 0xe1, 0x73, 0x18, 0x19, 0x83, 0x56, 0xf4,
	0x54, 0x8b, 0x9e, 0x6d, 0x7a, 0x7f, 0x52, 0x63, 0xd7, 0x16, 0x36, 0x6c, 0x7b, 0x38, 0x73, 0xf8,
	0x77, 0xd8, 0xab, 0x7c, 0x5b, 0xdd, 0x73, 0xc0, 0x25, 0xc9, 0xd9, 0xaf, 0xb8, 0xa0, 0x9f, 0xeb,
	0x45, 0xbb, 0x4b, 0xb8, 0x35, 0x13, 0xe6, 0xf0, 0xf7, 0x30, 0x54, 0x18, 0x2b, 0xfa, 0x0a, 0xbc,
	0x25, 0x49, 0xfd, 0x33, 0x6d, 0xf9, 0x70, 0xe1, 0x6e, 0xa3, 0xc6, 0x1c, 0xfe, 0x1b, 0x50, 0xad,
	0x4f, 0x23, 0xc9, 0x39, 0xe0, 0xcd, 0xba, 0x6a, 0xa3, 0x3c, 0x68, 0xd0, 0x37, 0x17, 0x3e, 0x3c,
	0xd8, 0x4e, 0xba, 0xb6, 0xa0, 0xcc, 0x39, 0xdd, 0xf9, 0xd1, 0x4f, 0xe3, 0x24, 0xbb, 0xdc, 0xd1,
	0x7f, 0x4c, 0xaf, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x71, 0x12, 0xb9, 0xaf, 0xa5, 0x04, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// NetworkServiceClient is the client API for NetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type NetworkServiceClient interface {
	GetNetworkMembers(ctx context.Context, in *NetworkKey, opts ...grpc.CallOption) (*UserKeys, error)
}

type networkServiceClient struct {
	cc *grpc.ClientConn
}

func NewNetworkServiceClient(cc *grpc.ClientConn) NetworkServiceClient {
	return &networkServiceClient{cc}
}

func (c *networkServiceClient) GetNetworkMembers(ctx context.Context, in *NetworkKey, opts ...grpc.CallOption) (*UserKeys, error) {
	out := new(UserKeys)
	err := c.cc.Invoke(ctx, "/interview.NetworkService/getNetworkMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetworkServiceServer is the server API for NetworkService service.
type NetworkServiceServer interface {
	GetNetworkMembers(context.Context, *NetworkKey) (*UserKeys, error)
}

// UnimplementedNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedNetworkServiceServer struct {
}

func (*UnimplementedNetworkServiceServer) GetNetworkMembers(ctx context.Context, req *NetworkKey) (*UserKeys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworkMembers not implemented")
}

func RegisterNetworkServiceServer(s *grpc.Server, srv NetworkServiceServer) {
	s.RegisterService(&_NetworkService_serviceDesc, srv)
}

func _NetworkService_GetNetworkMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetworkServiceServer).GetNetworkMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interview.NetworkService/GetNetworkMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetworkServiceServer).GetNetworkMembers(ctx, req.(*NetworkKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _NetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interview.NetworkService",
	HandlerType: (*NetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getNetworkMembers",
			Handler:    _NetworkService_GetNetworkMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API.proto",
}

// ContactServiceClient is the client API for ContactService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ContactServiceClient interface {
	GetCommonContacts(ctx context.Context, in *TwoUserKeys, opts ...grpc.CallOption) (*Contacts, error)
}

type contactServiceClient struct {
	cc *grpc.ClientConn
}

func NewContactServiceClient(cc *grpc.ClientConn) ContactServiceClient {
	return &contactServiceClient{cc}
}

func (c *contactServiceClient) GetCommonContacts(ctx context.Context, in *TwoUserKeys, opts ...grpc.CallOption) (*Contacts, error) {
	out := new(Contacts)
	err := c.cc.Invoke(ctx, "/interview.ContactService/getCommonContacts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContactServiceServer is the server API for ContactService service.
type ContactServiceServer interface {
	GetCommonContacts(context.Context, *TwoUserKeys) (*Contacts, error)
}

// UnimplementedContactServiceServer can be embedded to have forward compatible implementations.
type UnimplementedContactServiceServer struct {
}

func (*UnimplementedContactServiceServer) GetCommonContacts(ctx context.Context, req *TwoUserKeys) (*Contacts, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommonContacts not implemented")
}

func RegisterContactServiceServer(s *grpc.Server, srv ContactServiceServer) {
	s.RegisterService(&_ContactService_serviceDesc, srv)
}

func _ContactService_GetCommonContacts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUserKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContactServiceServer).GetCommonContacts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interview.ContactService/GetCommonContacts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContactServiceServer).GetCommonContacts(ctx, req.(*TwoUserKeys))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContactService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interview.ContactService",
	HandlerType: (*ContactServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getCommonContacts",
			Handler:    _ContactService_GetCommonContacts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API.proto",
}

// InterestsServiceClient is the client API for InterestsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InterestsServiceClient interface {
	GetSharedInterests(ctx context.Context, in *TwoUserKeys, opts ...grpc.CallOption) (*Interests, error)
}

type interestsServiceClient struct {
	cc *grpc.ClientConn
}

func NewInterestsServiceClient(cc *grpc.ClientConn) InterestsServiceClient {
	return &interestsServiceClient{cc}
}

func (c *interestsServiceClient) GetSharedInterests(ctx context.Context, in *TwoUserKeys, opts ...grpc.CallOption) (*Interests, error) {
	out := new(Interests)
	err := c.cc.Invoke(ctx, "/interview.InterestsService/getSharedInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InterestsServiceServer is the server API for InterestsService service.
type InterestsServiceServer interface {
	GetSharedInterests(context.Context, *TwoUserKeys) (*Interests, error)
}

// UnimplementedInterestsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedInterestsServiceServer struct {
}

func (*UnimplementedInterestsServiceServer) GetSharedInterests(ctx context.Context, req *TwoUserKeys) (*Interests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSharedInterests not implemented")
}

func RegisterInterestsServiceServer(s *grpc.Server, srv InterestsServiceServer) {
	s.RegisterService(&_InterestsService_serviceDesc, srv)
}

func _InterestsService_GetSharedInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwoUserKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InterestsServiceServer).GetSharedInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interview.InterestsService/GetSharedInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InterestsServiceServer).GetSharedInterests(ctx, req.(*TwoUserKeys))
	}
	return interceptor(ctx, in, info, handler)
}

var _InterestsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interview.InterestsService",
	HandlerType: (*InterestsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getSharedInterests",
			Handler:    _InterestsService_GetSharedInterests_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API.proto",
}

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserServiceClient interface {
	GetUser(ctx context.Context, in *UserKey, opts ...grpc.CallOption) (*User, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) GetUser(ctx context.Context, in *UserKey, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/interview.UserService/getUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
type UserServiceServer interface {
	GetUser(context.Context, *UserKey) (*User, error)
}

// UnimplementedUserServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserServiceServer struct {
}

func (*UnimplementedUserServiceServer) GetUser(ctx context.Context, req *UserKey) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interview.UserService/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUser(ctx, req.(*UserKey))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interview.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getUser",
			Handler:    _UserService_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API.proto",
}

// ViewNetworkServiceClient is the client API for ViewNetworkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ViewNetworkServiceClient interface {
	ViewNetworkMembers(ctx context.Context, in *UserViewingNetwork, opts ...grpc.CallOption) (*NetworkMembersView, error)
}

type viewNetworkServiceClient struct {
	cc *grpc.ClientConn
}

func NewViewNetworkServiceClient(cc *grpc.ClientConn) ViewNetworkServiceClient {
	return &viewNetworkServiceClient{cc}
}

func (c *viewNetworkServiceClient) ViewNetworkMembers(ctx context.Context, in *UserViewingNetwork, opts ...grpc.CallOption) (*NetworkMembersView, error) {
	out := new(NetworkMembersView)
	err := c.cc.Invoke(ctx, "/interview.ViewNetworkService/viewNetworkMembers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewNetworkServiceServer is the server API for ViewNetworkService service.
type ViewNetworkServiceServer interface {
	ViewNetworkMembers(context.Context, *UserViewingNetwork) (*NetworkMembersView, error)
}

// UnimplementedViewNetworkServiceServer can be embedded to have forward compatible implementations.
type UnimplementedViewNetworkServiceServer struct {
}

func (*UnimplementedViewNetworkServiceServer) ViewNetworkMembers(ctx context.Context, req *UserViewingNetwork) (*NetworkMembersView, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewNetworkMembers not implemented")
}

func RegisterViewNetworkServiceServer(s *grpc.Server, srv ViewNetworkServiceServer) {
	s.RegisterService(&_ViewNetworkService_serviceDesc, srv)
}

func _ViewNetworkService_ViewNetworkMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserViewingNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewNetworkServiceServer).ViewNetworkMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/interview.ViewNetworkService/ViewNetworkMembers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewNetworkServiceServer).ViewNetworkMembers(ctx, req.(*UserViewingNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

var _ViewNetworkService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "interview.ViewNetworkService",
	HandlerType: (*ViewNetworkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "viewNetworkMembers",
			Handler:    _ViewNetworkService_ViewNetworkMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "API.proto",
}
